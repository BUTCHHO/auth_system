import pytest
from auth.registration import Registrator
from auth.pydantic_models import User
from auth.exceptions import UserAlreadyExists

def get_mocks(mocker):
    user_actor = mocker.Mock()
    user_reader = mocker.Mock()
    hasher = mocker.Mock()
    return user_actor, user_reader, hasher

def test_registrate_user_success(mocker):
    user = User(name='tester', password='password')
    user_actor, user_reader, hasher = get_mocks(mocker)
    user_reader.get_record_by.return_value = None
    hasher.make_hash.return_value = 'super_long_hash'
    registrator = Registrator(user_actor, user_reader, hasher)
    result = registrator.registrate_user(user)
    assert result is True

def test_registrate_user_already_exists(mocker):
    user = User(name='tester_who_already_exists', password='123')
    user_actor, user_reader, hasher = get_mocks(mocker)
    user_reader.get_record_by.return_value = 'not none'
    registrator = Registrator(user_actor, user_reader, hasher)
    with pytest.raises(UserAlreadyExists):
        registrator.registrate_user(user)
from .exceptions import UserDontExists

class UserGetter:
    def __init__(self, user_reader, session_reader, cache_client):
        self.user_reader = user_reader
        self.session_reader = session_reader
        self.cache_client = cache_client

    def get_by_session_id(self, session_id):
        user_id = self.cache_client.get_data(session_id)
        if user_id is not None:
            user = self.user_reader.get_by_kwargs(id=user_id)
            if not user:
                raise UserDontExists(user_id)
            return user
        user = self.user_reader.get_by_kwargs(session_id=session_id)
        if not user:
            raise UserDontExists(user_id)
        return user

    def get_by_name(self, name):
        user = self.user_reader.get_by_kwargs(name=name)
        if not user:
            raise UserDontExists()
        return userfrom pydantic import BaseModel

class User(BaseModel):
    name: str
    password: str

from .pydantic_models import User
from .exceptions import InvalidPassword, UserDontExists


class Authenticator:
    def __init__(self, user_getter, hasher, session_maker):
        self.user_getter = user_getter
        self.hasher = hasher
        self.session_maker = session_maker


    def auth_by_session_id(self, session_id):
        return self.user_getter.get_by_session_id(session_id)

    def auth_by_name_and_psw_and_return_session(self, name, psw):
        user = self.user_getter.get_by_name(name)
        if user is None:
            raise UserDontExists
        if not self.hasher.compare_password_hashes(psw, user.password):
            raise InvalidPassword
        session = self.session_maker.make_session_and_save(user.id)
        return sessionfrom .exceptions import UserAlreadyHaveSession


class SessionMaker:
    def __init__(self, session_reader, session_actor, time_handler, hasher, cacher, SESSION_EXPIRE_DAYS):
        self.session_reader = session_reader
        self.session_actor = session_actor
        self.hasher = hasher
        self.cacher = cacher
        self.time_handler = time_handler
        self.SESSION_EXPIRE_DAYS = SESSION_EXPIRE_DAYS

    def make_session_and_save(self, user_id):
        if self.session_reader.get_by_kwargs(user_id=user_id):
            raise UserAlreadyHaveSession(user_id)
        session_id = self.hasher.make_urlsafe_hash()
        session_expire_date = self.time_handler.add_days_to_current_date(self.SESSION_EXPIRE_DAYS)
        session = self.session_actor.create_record(id=session_id, user_id=session_id, expire_date=session_expire_date)
        self.session_actor.write_record_to_db(session)
        self.cacher.put_data(session_id, user_id)
        return session
from .pydantic_models import User
from .exceptions import UserAlreadyExists

class Registrator:
    def __init__(self, user_actor, user_reader, hash_maker):
        self.user_actor = user_actor
        self.user_reader = user_reader
        self.hash_maker = hash_maker

    def registrate_user(self, user_model: User):
        if self.user_reader.get_record_by(name=user_model.name):
            raise UserAlreadyExists
        hash_psw = self.hash_maker.make_hash(user_model.password)
        self.user_actor.make_record_and_write(name=user_model.name, password=hash_psw)
        return True
class UserAlreadyExists(Exception):
    def __init__(self, name=''):
        msg = f'User {name} already exists'
        super().__init__(msg)

class UserDontExists(Exception):
    def __init__(self, id=None):
        msg = f'User with id {id} dont exists'
        super().__init__(msg)

class InvalidPassword(Exception):
    def __init__(self, password=None):
        msg = f'Wrong password {password}'
        super().__init__(msg)

class UserAlreadyHaveSession(Exception):
    def __init__(self, user_id=None):
        msg = f'User {user_id} already have session'
        super().__init__(msg)